// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Neoset {
  id          Int      @id @default(autoincrement())
  name        String
  description String
  pathname    String
  srcImg      String
  code        Code[]
  images      Images[]

  @@map("neosets")
}

model Images {
  id          Int     @id @default(autoincrement())
  alt         String?
  description String?
  src         String
  neoset      Neoset? @relation(fields: [neosetId], references: [id])
  neosetId    Int?
}

model Code {
  id         Int         @id @default(autoincrement())
  neoset     Neoset?     @relation(fields: [neosetId], references: [id])
  neosetId   Int?
  title      String
  transcript String
  consist    Consist[]
  consistOf  ConsistOf[]

  @@map("codes")
}

model Consist {
  id                   Int     @id @default(autoincrement())
  Code                 Code?   @relation(fields: [codeId], references: [id])
  codeId               Int?
  napkin               String?
  ball                 String?
  pintsetMedium        String?
  pintsetThin          String?
  scalpelRemoveFiber   String?
  scalpelEleven        String?
  clamp                String?
  needleHolder         String?
  container            String?
  bandage              String?
  plasterTrip          String?
  plaster              String?
  plasterPostOperative String?
  plasterFixCatheter   String?
  cover                String?
  coverAperture        String?
  coverAdhesive        String?
}

model ConsistOf {
  id        Int    @id @default(autoincrement())
  code      Code?  @relation(fields: [codeId], references: [id])
  codeId    Int?
  component String
  count     String
  class     String

  @@map("consistOf")
}

model Category {
  id      Int     @id @default(autoincrement())
  name    String  @unique
  content String?
  posts   Post[]
}

model Section {
  id    Int    @id @default(autoincrement())
  name  String @unique
  posts Post[]
}

model Post {
  id         String    @id @default(cuid())
  title      String
  content    String
  photoUrl   String?
  postUrl    String?
  categoryId Int?
  sectionId  Int?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  category   Category? @relation(fields: [categoryId], references: [id])
  section    Section?  @relation(fields: [sectionId], references: [id])

  @@map("posts")
}
